package com.db.RPC.model; /**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
/**
 * Master告知Region当前状态请求
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-25")
public class NotifyStateRequest implements org.apache.thrift.TBase<NotifyStateRequest, NotifyStateRequest._Fields>, java.io.Serializable, Cloneable, Comparable<NotifyStateRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("com.db.RPC.model.NotifyStateRequest");

  private static final org.apache.thrift.protocol.TField STATE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("stateCode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DUAL_SERVER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dualServerName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DUAL_SERVER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("dualServerUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField BASE_FIELD_DESC = new org.apache.thrift.protocol.TField("base", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotifyStateRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotifyStateRequestTupleSchemeFactory();

  public int stateCode; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dualServerName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String dualServerUrl; // optional
  public @org.apache.thrift.annotation.Nullable Base base; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATE_CODE((short)1, "stateCode"),
    DUAL_SERVER_NAME((short)2, "dualServerName"),
    DUAL_SERVER_URL((short)3, "dualServerUrl"),
    BASE((short)255, "base");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATE_CODE
          return STATE_CODE;
        case 2: // DUAL_SERVER_NAME
          return DUAL_SERVER_NAME;
        case 3: // DUAL_SERVER_URL
          return DUAL_SERVER_URL;
        case 255: // BASE
          return BASE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATECODE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STATE_CODE,_Fields.DUAL_SERVER_NAME,_Fields.DUAL_SERVER_URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATE_CODE, new org.apache.thrift.meta_data.FieldMetaData("stateCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DUAL_SERVER_NAME, new org.apache.thrift.meta_data.FieldMetaData("dualServerName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DUAL_SERVER_URL, new org.apache.thrift.meta_data.FieldMetaData("dualServerUrl", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BASE, new org.apache.thrift.meta_data.FieldMetaData("base", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Base.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotifyStateRequest.class, metaDataMap);
  }

  public NotifyStateRequest() {
  }

  public NotifyStateRequest(
    Base base)
  {
    this();
    this.base = base;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotifyStateRequest(NotifyStateRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.stateCode = other.stateCode;
    if (other.isSetDualServerName()) {
      this.dualServerName = other.dualServerName;
    }
    if (other.isSetDualServerUrl()) {
      this.dualServerUrl = other.dualServerUrl;
    }
    if (other.isSetBase()) {
      this.base = new Base(other.base);
    }
  }

  @Override
  public NotifyStateRequest deepCopy() {
    return new NotifyStateRequest(this);
  }

  @Override
  public void clear() {
    setStateCodeIsSet(false);
    this.stateCode = 0;
    this.dualServerName = null;
    this.dualServerUrl = null;
    this.base = null;
  }

  public int getStateCode() {
    return this.stateCode;
  }

  public NotifyStateRequest setStateCode(int stateCode) {
    this.stateCode = stateCode;
    setStateCodeIsSet(true);
    return this;
  }

  public void unsetStateCode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATECODE_ISSET_ID);
  }

  /** Returns true if field stateCode is set (has been assigned a value) and false otherwise */
  public boolean isSetStateCode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATECODE_ISSET_ID);
  }

  public void setStateCodeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATECODE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDualServerName() {
    return this.dualServerName;
  }

  public NotifyStateRequest setDualServerName(@org.apache.thrift.annotation.Nullable java.lang.String dualServerName) {
    this.dualServerName = dualServerName;
    return this;
  }

  public void unsetDualServerName() {
    this.dualServerName = null;
  }

  /** Returns true if field dualServerName is set (has been assigned a value) and false otherwise */
  public boolean isSetDualServerName() {
    return this.dualServerName != null;
  }

  public void setDualServerNameIsSet(boolean value) {
    if (!value) {
      this.dualServerName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDualServerUrl() {
    return this.dualServerUrl;
  }

  public NotifyStateRequest setDualServerUrl(@org.apache.thrift.annotation.Nullable java.lang.String dualServerUrl) {
    this.dualServerUrl = dualServerUrl;
    return this;
  }

  public void unsetDualServerUrl() {
    this.dualServerUrl = null;
  }

  /** Returns true if field dualServerUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetDualServerUrl() {
    return this.dualServerUrl != null;
  }

  public void setDualServerUrlIsSet(boolean value) {
    if (!value) {
      this.dualServerUrl = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Base getBase() {
    return this.base;
  }

  public NotifyStateRequest setBase(@org.apache.thrift.annotation.Nullable Base base) {
    this.base = base;
    return this;
  }

  public void unsetBase() {
    this.base = null;
  }

  /** Returns true if field base is set (has been assigned a value) and false otherwise */
  public boolean isSetBase() {
    return this.base != null;
  }

  public void setBaseIsSet(boolean value) {
    if (!value) {
      this.base = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STATE_CODE:
      if (value == null) {
        unsetStateCode();
      } else {
        setStateCode((java.lang.Integer)value);
      }
      break;

    case DUAL_SERVER_NAME:
      if (value == null) {
        unsetDualServerName();
      } else {
        setDualServerName((java.lang.String)value);
      }
      break;

    case DUAL_SERVER_URL:
      if (value == null) {
        unsetDualServerUrl();
      } else {
        setDualServerUrl((java.lang.String)value);
      }
      break;

    case BASE:
      if (value == null) {
        unsetBase();
      } else {
        setBase((Base)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATE_CODE:
      return getStateCode();

    case DUAL_SERVER_NAME:
      return getDualServerName();

    case DUAL_SERVER_URL:
      return getDualServerUrl();

    case BASE:
      return getBase();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATE_CODE:
      return isSetStateCode();
    case DUAL_SERVER_NAME:
      return isSetDualServerName();
    case DUAL_SERVER_URL:
      return isSetDualServerUrl();
    case BASE:
      return isSetBase();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NotifyStateRequest)
      return this.equals((NotifyStateRequest)that);
    return false;
  }

  public boolean equals(NotifyStateRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_stateCode = true && this.isSetStateCode();
    boolean that_present_stateCode = true && that.isSetStateCode();
    if (this_present_stateCode || that_present_stateCode) {
      if (!(this_present_stateCode && that_present_stateCode))
        return false;
      if (this.stateCode != that.stateCode)
        return false;
    }

    boolean this_present_dualServerName = true && this.isSetDualServerName();
    boolean that_present_dualServerName = true && that.isSetDualServerName();
    if (this_present_dualServerName || that_present_dualServerName) {
      if (!(this_present_dualServerName && that_present_dualServerName))
        return false;
      if (!this.dualServerName.equals(that.dualServerName))
        return false;
    }

    boolean this_present_dualServerUrl = true && this.isSetDualServerUrl();
    boolean that_present_dualServerUrl = true && that.isSetDualServerUrl();
    if (this_present_dualServerUrl || that_present_dualServerUrl) {
      if (!(this_present_dualServerUrl && that_present_dualServerUrl))
        return false;
      if (!this.dualServerUrl.equals(that.dualServerUrl))
        return false;
    }

    boolean this_present_base = true && this.isSetBase();
    boolean that_present_base = true && that.isSetBase();
    if (this_present_base || that_present_base) {
      if (!(this_present_base && that_present_base))
        return false;
      if (!this.base.equals(that.base))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetStateCode()) ? 131071 : 524287);
    if (isSetStateCode())
      hashCode = hashCode * 8191 + stateCode;

    hashCode = hashCode * 8191 + ((isSetDualServerName()) ? 131071 : 524287);
    if (isSetDualServerName())
      hashCode = hashCode * 8191 + dualServerName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDualServerUrl()) ? 131071 : 524287);
    if (isSetDualServerUrl())
      hashCode = hashCode * 8191 + dualServerUrl.hashCode();

    hashCode = hashCode * 8191 + ((isSetBase()) ? 131071 : 524287);
    if (isSetBase())
      hashCode = hashCode * 8191 + base.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NotifyStateRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetStateCode(), other.isSetStateCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStateCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stateCode, other.stateCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDualServerName(), other.isSetDualServerName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDualServerName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dualServerName, other.dualServerName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDualServerUrl(), other.isSetDualServerUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDualServerUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dualServerUrl, other.dualServerUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBase(), other.isSetBase());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBase()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.base, other.base);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("com.db.RPC.model.NotifyStateRequest(");
    boolean first = true;

    if (isSetStateCode()) {
      sb.append("stateCode:");
      sb.append(this.stateCode);
      first = false;
    }
    if (isSetDualServerName()) {
      if (!first) sb.append(", ");
      sb.append("dualServerName:");
      if (this.dualServerName == null) {
        sb.append("null");
      } else {
        sb.append(this.dualServerName);
      }
      first = false;
    }
    if (isSetDualServerUrl()) {
      if (!first) sb.append(", ");
      sb.append("dualServerUrl:");
      if (this.dualServerUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.dualServerUrl);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("base:");
    if (this.base == null) {
      sb.append("null");
    } else {
      sb.append(this.base);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (base == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'base' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (base != null) {
      base.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotifyStateRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NotifyStateRequestStandardScheme getScheme() {
      return new NotifyStateRequestStandardScheme();
    }
  }

  private static class NotifyStateRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotifyStateRequest> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, NotifyStateRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stateCode = iprot.readI32();
              struct.setStateCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DUAL_SERVER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dualServerName = iprot.readString();
              struct.setDualServerNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DUAL_SERVER_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dualServerUrl = iprot.readString();
              struct.setDualServerUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.base = new Base();
              struct.base.read(iprot);
              struct.setBaseIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, NotifyStateRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetStateCode()) {
        oprot.writeFieldBegin(STATE_CODE_FIELD_DESC);
        oprot.writeI32(struct.stateCode);
        oprot.writeFieldEnd();
      }
      if (struct.dualServerName != null) {
        if (struct.isSetDualServerName()) {
          oprot.writeFieldBegin(DUAL_SERVER_NAME_FIELD_DESC);
          oprot.writeString(struct.dualServerName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dualServerUrl != null) {
        if (struct.isSetDualServerUrl()) {
          oprot.writeFieldBegin(DUAL_SERVER_URL_FIELD_DESC);
          oprot.writeString(struct.dualServerUrl);
          oprot.writeFieldEnd();
        }
      }
      if (struct.base != null) {
        oprot.writeFieldBegin(BASE_FIELD_DESC);
        struct.base.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotifyStateRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public NotifyStateRequestTupleScheme getScheme() {
      return new NotifyStateRequestTupleScheme();
    }
  }

  private static class NotifyStateRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotifyStateRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotifyStateRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.base.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStateCode()) {
        optionals.set(0);
      }
      if (struct.isSetDualServerName()) {
        optionals.set(1);
      }
      if (struct.isSetDualServerUrl()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStateCode()) {
        oprot.writeI32(struct.stateCode);
      }
      if (struct.isSetDualServerName()) {
        oprot.writeString(struct.dualServerName);
      }
      if (struct.isSetDualServerUrl()) {
        oprot.writeString(struct.dualServerUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotifyStateRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.base = new Base();
      struct.base.read(iprot);
      struct.setBaseIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.stateCode = iprot.readI32();
        struct.setStateCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dualServerName = iprot.readString();
        struct.setDualServerNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dualServerUrl = iprot.readString();
        struct.setDualServerUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}


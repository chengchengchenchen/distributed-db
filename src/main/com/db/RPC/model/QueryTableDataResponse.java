package com.db.RPC.model; /**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
/**
 * 响应体：Region返回ResultSetData
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.18.1)", date = "2023-05-25")
public class QueryTableDataResponse implements org.apache.thrift.TBase<QueryTableDataResponse, QueryTableDataResponse._Fields>, java.io.Serializable, Cloneable, Comparable<QueryTableDataResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("com.db.RPC.model.QueryTableDataResponse");

  private static final org.apache.thrift.protocol.TField RESULT_SET_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("com.db.RPC.model.ResultSetData", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BASE_RESP_FIELD_DESC = new org.apache.thrift.protocol.TField("baseResp", org.apache.thrift.protocol.TType.STRUCT, (short)255);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueryTableDataResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueryTableDataResponseTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable ResultSetData ResultSetData; // required
  public @org.apache.thrift.annotation.Nullable BaseResp baseResp; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RESULT_SET_DATA((short)1, "com.db.RPC.model.ResultSetData"),
    BASE_RESP((short)255, "baseResp");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RESULT_SET_DATA
          return RESULT_SET_DATA;
        case 255: // BASE_RESP
          return BASE_RESP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    @Override
    public short getThriftFieldId() {
      return _thriftId;
    }

    @Override
    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RESULT_SET_DATA, new org.apache.thrift.meta_data.FieldMetaData("com.db.RPC.model.ResultSetData", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultSetData.class)));
    tmpMap.put(_Fields.BASE_RESP, new org.apache.thrift.meta_data.FieldMetaData("baseResp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BaseResp.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueryTableDataResponse.class, metaDataMap);
  }

  public QueryTableDataResponse() {
  }

  public QueryTableDataResponse(
    ResultSetData ResultSetData,
    BaseResp baseResp)
  {
    this();
    this.ResultSetData = ResultSetData;
    this.baseResp = baseResp;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueryTableDataResponse(QueryTableDataResponse other) {
    if (other.isSetResultSetData()) {
      this.ResultSetData = new ResultSetData(other.ResultSetData);
    }
    if (other.isSetBaseResp()) {
      this.baseResp = new BaseResp(other.baseResp);
    }
  }

  @Override
  public QueryTableDataResponse deepCopy() {
    return new QueryTableDataResponse(this);
  }

  @Override
  public void clear() {
    this.ResultSetData = null;
    this.baseResp = null;
  }

  @org.apache.thrift.annotation.Nullable
  public ResultSetData getResultSetData() {
    return this.ResultSetData;
  }

  public QueryTableDataResponse setResultSetData(@org.apache.thrift.annotation.Nullable ResultSetData ResultSetData) {
    this.ResultSetData = ResultSetData;
    return this;
  }

  public void unsetResultSetData() {
    this.ResultSetData = null;
  }

  /** Returns true if field com.db.RPC.model.ResultSetData is set (has been assigned a value) and false otherwise */
  public boolean isSetResultSetData() {
    return this.ResultSetData != null;
  }

  public void setResultSetDataIsSet(boolean value) {
    if (!value) {
      this.ResultSetData = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public BaseResp getBaseResp() {
    return this.baseResp;
  }

  public QueryTableDataResponse setBaseResp(@org.apache.thrift.annotation.Nullable BaseResp baseResp) {
    this.baseResp = baseResp;
    return this;
  }

  public void unsetBaseResp() {
    this.baseResp = null;
  }

  /** Returns true if field baseResp is set (has been assigned a value) and false otherwise */
  public boolean isSetBaseResp() {
    return this.baseResp != null;
  }

  public void setBaseRespIsSet(boolean value) {
    if (!value) {
      this.baseResp = null;
    }
  }

  @Override
  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case RESULT_SET_DATA:
      if (value == null) {
        unsetResultSetData();
      } else {
        setResultSetData((ResultSetData)value);
      }
      break;

    case BASE_RESP:
      if (value == null) {
        unsetBaseResp();
      } else {
        setBaseResp((BaseResp)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RESULT_SET_DATA:
      return getResultSetData();

    case BASE_RESP:
      return getBaseResp();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  @Override
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RESULT_SET_DATA:
      return isSetResultSetData();
    case BASE_RESP:
      return isSetBaseResp();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof QueryTableDataResponse)
      return this.equals((QueryTableDataResponse)that);
    return false;
  }

  public boolean equals(QueryTableDataResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ResultSetData = true && this.isSetResultSetData();
    boolean that_present_ResultSetData = true && that.isSetResultSetData();
    if (this_present_ResultSetData || that_present_ResultSetData) {
      if (!(this_present_ResultSetData && that_present_ResultSetData))
        return false;
      if (!this.ResultSetData.equals(that.ResultSetData))
        return false;
    }

    boolean this_present_baseResp = true && this.isSetBaseResp();
    boolean that_present_baseResp = true && that.isSetBaseResp();
    if (this_present_baseResp || that_present_baseResp) {
      if (!(this_present_baseResp && that_present_baseResp))
        return false;
      if (!this.baseResp.equals(that.baseResp))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetResultSetData()) ? 131071 : 524287);
    if (isSetResultSetData())
      hashCode = hashCode * 8191 + ResultSetData.hashCode();

    hashCode = hashCode * 8191 + ((isSetBaseResp()) ? 131071 : 524287);
    if (isSetBaseResp())
      hashCode = hashCode * 8191 + baseResp.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QueryTableDataResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetResultSetData(), other.isSetResultSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ResultSetData, other.ResultSetData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBaseResp(), other.isSetBaseResp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBaseResp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseResp, other.baseResp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  @Override
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  @Override
  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  @Override
  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("com.db.RPC.model.QueryTableDataResponse(");
    boolean first = true;

    sb.append("com.db.RPC.model.ResultSetData:");
    if (this.ResultSetData == null) {
      sb.append("null");
    } else {
      sb.append(this.ResultSetData);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("baseResp:");
    if (this.baseResp == null) {
      sb.append("null");
    } else {
      sb.append(this.baseResp);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ResultSetData == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'com.db.RPC.model.ResultSetData' was not present! Struct: " + toString());
    }
    if (baseResp == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'baseResp' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (ResultSetData != null) {
      ResultSetData.validate();
    }
    if (baseResp != null) {
      baseResp.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueryTableDataResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public QueryTableDataResponseStandardScheme getScheme() {
      return new QueryTableDataResponseStandardScheme();
    }
  }

  private static class QueryTableDataResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueryTableDataResponse> {

    @Override
    public void read(org.apache.thrift.protocol.TProtocol iprot, QueryTableDataResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RESULT_SET_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ResultSetData = new ResultSetData();
              struct.ResultSetData.read(iprot);
              struct.setResultSetDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 255: // BASE_RESP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.baseResp = new BaseResp();
              struct.baseResp.read(iprot);
              struct.setBaseRespIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    @Override
    public void write(org.apache.thrift.protocol.TProtocol oprot, QueryTableDataResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ResultSetData != null) {
        oprot.writeFieldBegin(RESULT_SET_DATA_FIELD_DESC);
        struct.ResultSetData.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.baseResp != null) {
        oprot.writeFieldBegin(BASE_RESP_FIELD_DESC);
        struct.baseResp.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueryTableDataResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    @Override
    public QueryTableDataResponseTupleScheme getScheme() {
      return new QueryTableDataResponseTupleScheme();
    }
  }

  private static class QueryTableDataResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueryTableDataResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueryTableDataResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ResultSetData.write(oprot);
      struct.baseResp.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueryTableDataResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ResultSetData = new ResultSetData();
      struct.ResultSetData.read(iprot);
      struct.setResultSetDataIsSet(true);
      struct.baseResp = new BaseResp();
      struct.baseResp.read(iprot);
      struct.setBaseRespIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

